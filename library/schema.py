"""Core schema definitions and encoding helpers for the practice library."""
from __future__ import annotations

import json
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, List, Optional

REPO_ROOT = Path(__file__).resolve().parents[1]
DEFAULT_DATA_DIR = REPO_ROOT / "data"
ENCODINGS_PATH = DEFAULT_DATA_DIR / "encodings.json"


@dataclass
class Practice:
    """Metadata describing an agronomic practice."""

    id: str
    crop: str
    anomaly_type: str
    description: str
    tags: List[str] = field(default_factory=list)
    expected_outcomes: List[str] = field(default_factory=list)
    evidence: List[str] = field(default_factory=list)
    cost_level: Optional[str] = None
    labor_intensity: Optional[str] = None


@dataclass
class Region:
    """Contextual metadata for a geographic region."""

    id: str
    country: str
    climate: str
    primary_crops: List[str] = field(default_factory=list)
    elevation_m: Optional[float] = None
    soil_types: List[str] = field(default_factory=list)
    notes: Optional[str] = None


def load_encodings(path: Path = ENCODINGS_PATH) -> Dict[str, Dict[str, int]]:
    """Load categorical encodings generated by the dataset builder."""

    if not path.exists():
        return {"phenology_stage": {}, "soil_type": {}, "crop": {}, "practice_id": {}}
    with path.open("r", encoding="utf-8") as fp:
        return json.load(fp)


def encode_value(kind: str, value: Optional[str]) -> int:
    """Lookup the encoded integer for a categorical value.

    Unknown values are mapped to ``-1`` to signal an out-of-vocabulary token to the
    downstream model.
    """

    if value is None:
        return -1
    encodings = load_encodings()
    mapping = encodings.get(kind, {})
    return mapping.get(value, -1)


def encode_stage(stage: Optional[str]) -> int:
    return encode_value("phenology_stage", stage)


def encode_soil(soil_type: Optional[str]) -> int:
    return encode_value("soil_type", soil_type)


def encode_crop(crop: Optional[str]) -> int:
    return encode_value("crop", crop)


def encode_practice(practice_id: Optional[str]) -> int:
    return encode_value("practice_id", practice_id)


def data_file(name: str) -> Path:
    """Resolve a file path within the repository data directory."""

    return DEFAULT_DATA_DIR / name
